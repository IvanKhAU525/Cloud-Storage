//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cloud_Storage.LoadBalancerSvc {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoadBalancerSvc.ILoadBalancer")]
    public interface ILoadBalancer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DonwloadFile", ReplyAction="http://tempuri.org/ILoadBalancer/DonwloadFileResponse")]
        System.IO.Stream DonwloadFile(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DonwloadFile", ReplyAction="http://tempuri.org/ILoadBalancer/DonwloadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DonwloadFileAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DonwloadFiles", ReplyAction="http://tempuri.org/ILoadBalancer/DonwloadFilesResponse")]
        System.IO.Stream DonwloadFiles(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DonwloadFiles", ReplyAction="http://tempuri.org/ILoadBalancer/DonwloadFilesResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DonwloadFilesAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/UploadFile", ReplyAction="http://tempuri.org/ILoadBalancer/UploadFileResponse")]
        bool UploadFile(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/UploadFile", ReplyAction="http://tempuri.org/ILoadBalancer/UploadFileResponse")]
        System.Threading.Tasks.Task<bool> UploadFileAsync(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/UploadFiles", ReplyAction="http://tempuri.org/ILoadBalancer/UploadFilesResponse")]
        int UploadFiles(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/UploadFiles", ReplyAction="http://tempuri.org/ILoadBalancer/UploadFilesResponse")]
        System.Threading.Tasks.Task<int> UploadFilesAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DisplayFiles", ReplyAction="http://tempuri.org/ILoadBalancer/DisplayFilesResponse")]
        string[] DisplayFiles(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DisplayFiles", ReplyAction="http://tempuri.org/ILoadBalancer/DisplayFilesResponse")]
        System.Threading.Tasks.Task<string[]> DisplayFilesAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DeleteFile", ReplyAction="http://tempuri.org/ILoadBalancer/DeleteFileResponse")]
        int DeleteFile(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DeleteFile", ReplyAction="http://tempuri.org/ILoadBalancer/DeleteFileResponse")]
        System.Threading.Tasks.Task<int> DeleteFileAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DeleteFiles", ReplyAction="http://tempuri.org/ILoadBalancer/DeleteFilesResponse")]
        bool DeleteFiles(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DeleteFiles", ReplyAction="http://tempuri.org/ILoadBalancer/DeleteFilesResponse")]
        System.Threading.Tasks.Task<bool> DeleteFilesAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/CreateFile", ReplyAction="http://tempuri.org/ILoadBalancer/CreateFileResponse")]
        bool CreateFile(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/CreateFile", ReplyAction="http://tempuri.org/ILoadBalancer/CreateFileResponse")]
        System.Threading.Tasks.Task<bool> CreateFileAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/CreateFolder", ReplyAction="http://tempuri.org/ILoadBalancer/CreateFolderResponse")]
        bool CreateFolder(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/CreateFolder", ReplyAction="http://tempuri.org/ILoadBalancer/CreateFolderResponse")]
        System.Threading.Tasks.Task<bool> CreateFolderAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/RegisterUser", ReplyAction="http://tempuri.org/ILoadBalancer/RegisterUserResponse")]
        bool RegisterUser(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/RegisterUser", ReplyAction="http://tempuri.org/ILoadBalancer/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DeleteUser", ReplyAction="http://tempuri.org/ILoadBalancer/DeleteUserResponse")]
        bool DeleteUser(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/DeleteUser", ReplyAction="http://tempuri.org/ILoadBalancer/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/ExpUpld", ReplyAction="http://tempuri.org/ILoadBalancer/ExpUpldResponse")]
        bool ExpUpld(string localPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoadBalancer/ExpUpld", ReplyAction="http://tempuri.org/ILoadBalancer/ExpUpldResponse")]
        System.Threading.Tasks.Task<bool> ExpUpldAsync(string localPath);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoadBalancerChannel : Cloud_Storage.LoadBalancerSvc.ILoadBalancer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadBalancerClient : System.ServiceModel.ClientBase<Cloud_Storage.LoadBalancerSvc.ILoadBalancer>, Cloud_Storage.LoadBalancerSvc.ILoadBalancer {
        
        public LoadBalancerClient() {
        }
        
        public LoadBalancerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoadBalancerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoadBalancerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoadBalancerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.Stream DonwloadFile(string localPath) {
            return base.Channel.DonwloadFile(localPath);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DonwloadFileAsync(string localPath) {
            return base.Channel.DonwloadFileAsync(localPath);
        }
        
        public System.IO.Stream DonwloadFiles(string localPath) {
            return base.Channel.DonwloadFiles(localPath);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DonwloadFilesAsync(string localPath) {
            return base.Channel.DonwloadFilesAsync(localPath);
        }
        
        public bool UploadFile(System.IO.Stream stream) {
            return base.Channel.UploadFile(stream);
        }
        
        public System.Threading.Tasks.Task<bool> UploadFileAsync(System.IO.Stream stream) {
            return base.Channel.UploadFileAsync(stream);
        }
        
        public int UploadFiles(string localPath) {
            return base.Channel.UploadFiles(localPath);
        }
        
        public System.Threading.Tasks.Task<int> UploadFilesAsync(string localPath) {
            return base.Channel.UploadFilesAsync(localPath);
        }
        
        public string[] DisplayFiles(string localPath) {
            return base.Channel.DisplayFiles(localPath);
        }
        
        public System.Threading.Tasks.Task<string[]> DisplayFilesAsync(string localPath) {
            return base.Channel.DisplayFilesAsync(localPath);
        }
        
        public int DeleteFile(string localPath) {
            return base.Channel.DeleteFile(localPath);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFileAsync(string localPath) {
            return base.Channel.DeleteFileAsync(localPath);
        }
        
        public bool DeleteFiles(string localPath) {
            return base.Channel.DeleteFiles(localPath);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFilesAsync(string localPath) {
            return base.Channel.DeleteFilesAsync(localPath);
        }
        
        public bool CreateFile(string localPath) {
            return base.Channel.CreateFile(localPath);
        }
        
        public System.Threading.Tasks.Task<bool> CreateFileAsync(string localPath) {
            return base.Channel.CreateFileAsync(localPath);
        }
        
        public bool CreateFolder(string localPath) {
            return base.Channel.CreateFolder(localPath);
        }
        
        public System.Threading.Tasks.Task<bool> CreateFolderAsync(string localPath) {
            return base.Channel.CreateFolderAsync(localPath);
        }
        
        public bool RegisterUser(string localPath) {
            return base.Channel.RegisterUser(localPath);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string localPath) {
            return base.Channel.RegisterUserAsync(localPath);
        }
        
        public bool DeleteUser(string localPath) {
            return base.Channel.DeleteUser(localPath);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string localPath) {
            return base.Channel.DeleteUserAsync(localPath);
        }
        
        public bool ExpUpld(string localPath) {
            return base.Channel.ExpUpld(localPath);
        }
        
        public System.Threading.Tasks.Task<bool> ExpUpldAsync(string localPath) {
            return base.Channel.ExpUpldAsync(localPath);
        }
    }
}
